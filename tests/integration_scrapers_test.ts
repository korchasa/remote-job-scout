/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤ - —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Indeed API
 *
 * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –¥–µ–ª–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Indeed GraphQL API
 * –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞.
 */

import {
  assert,
  assertEquals,
  assertExists,
  assertStringIncludes,
} from "https://deno.land/std@0.208.0/testing/asserts.ts";
import {
  Country,
  DescriptionFormat,
  JobType,
  ScraperInput,
  Site,
} from "../src/types/scrapers.ts";
import { IndeedScraper } from "../src/services/scrapers/indeed.ts";

/**
 * –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ Indeed —Å –±–∞–∑–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
 */
Deno.test("Indeed Integration - Basic job search with real API", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "software engineer",
    country: Country.USA,
    results_wanted: 5,
    description_format: DescriptionFormat.HTML,
  };

  console.log("üîç Starting real Indeed API integration test...");

  const startTime = Date.now();
  const result = await scraper.scrape(input);
  const duration = Date.now() - startTime;

  console.log(`‚úÖ API call completed in ${duration}ms`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
  assertExists(result);
  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  assert(result.jobs.length > 0, "–î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å–∏—é");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é
  for (const job of result.jobs) {
    assertExists(job.title, "–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫");
    assert(typeof job.title === "string", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
    assert(job.title.length > 0, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

    assertExists(job.job_url, "–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å URL");
    assert(typeof job.job_url === "string", "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
    assertStringIncludes(
      job.job_url,
      "indeed.com",
      "URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å indeed.com",
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
    if (job.company_name !== null) {
      assert(
        typeof job.company_name === "string",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if (job.description !== null) {
      assert(
        typeof job.description === "string",
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      );
      assert(job.description.length > 0, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    if (job.location) {
      if (job.location.city) {
        assert(
          typeof job.location.city === "string",
          "–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
        );
      }
      if (job.location.country) {
        assert(
          typeof job.location.country === "string",
          "–°—Ç—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
        );
      }
    }

    console.log(
      `üìã Job: ${job.title} at ${job.company_name || "Unknown"} (${
        job.location?.city || "Remote"
      })`,
    );
  }

  console.log(
    `üéØ Successfully scraped ${result.jobs.length} jobs from Indeed API`,
  );
});

/**
 * –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º API
 */
Deno.test("Indeed Integration - Remote jobs search", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "frontend developer",
    is_remote: true,
    country: Country.USA,
    results_wanted: 3, // Reduce to 3 for faster testing
    description_format: DescriptionFormat.MARKDOWN,
  };

  console.log("üè† Testing remote jobs search with real API...");

  const result = await scraper.scrape(input);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
  assert(result.jobs.length > 0, "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ remote
  const remoteJobs = result.jobs.filter((job) => job.is_remote === true);
  console.log(
    `Found ${remoteJobs.length} explicitly remote jobs out of ${result.jobs.length} total`,
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
  if (remoteJobs.length > 0) {
    const remoteJob = remoteJobs[0];
    assert(
      typeof remoteJob.is_remote === "boolean",
      "is_remote –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean",
    );
    assert(
      remoteJob.is_remote === true,
      "–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ remote",
    );

    console.log(
      `üåç Remote job example: ${remoteJob.title} - ${
        remoteJob.location?.city || "No location"
      }`,
    );
  }
});

/**
 * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
 */
Deno.test("Indeed Integration - Job type filtering", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "data scientist",
    job_type: JobType.FULL_TIME,
    country: Country.USA,
    results_wanted: 6,
  };

  console.log("üíº Testing full-time job filtering...");

  const result = await scraper.scrape(input);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");

  if (result.jobs.length > 0) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    const fullTimeJobs = result.jobs.filter((job) =>
      job.job_type && job.job_type.includes(JobType.FULL_TIME)
    );

    console.log(
      `Found ${fullTimeJobs.length} full-time jobs out of ${result.jobs.length} total`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (fullTimeJobs.length > 0) {
      const job = fullTimeJobs[0];
      assert(Array.isArray(job.job_type), "job_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
      assert(
        job.job_type.includes(JobType.FULL_TIME),
        "–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å FULL_TIME",
      );
    }
  }
});

/**
 * –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º
 */
Deno.test("Indeed Integration - Multi-country search", async () => {
  const scraper = new IndeedScraper();
  const countries = [Country.USA, Country.UK, Country.CANADA];

  for (const country of countries) {
    console.log(`üåç Testing ${country} domain...`);

    const input: ScraperInput = {
      site_type: [Site.INDEED],
      search_term: "product manager",
      country: country,
      results_wanted: 3,
      description_format: DescriptionFormat.PLAIN,
    };

    try {
      const result = await scraper.scrape(input);

      assert(
        Array.isArray(result.jobs),
        `Jobs –¥–ª—è ${country} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`,
      );

      if (result.jobs.length > 0) {
        console.log(`‚úÖ ${country}: Found ${result.jobs.length} jobs`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞–Ω–µ
        const countryDomains: Record<string, string> = {
          [Country.USA]: "indeed.com",
          [Country.UK]: "indeed.co.uk",
          [Country.CANADA]: "indeed.ca",
        };

        const expectedDomain = countryDomains[country as string];
        if (expectedDomain) {
          const job = result.jobs[0];
          assertStringIncludes(
            job.job_url,
            expectedDomain,
            `URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${expectedDomain}`,
          );
        }
      } else {
        console.log(`‚ö†Ô∏è ${country}: No jobs found (API might be rate-limited)`);
      }
    } catch (error) {
      console.error(
        `‚ùå ${country} failed:`,
        error instanceof Error ? error.message : String(error),
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }
});

/**
 * –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–≤–µ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
 */
Deno.test("Indeed Integration - Recent jobs (24h)", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "ux designer",
    hours_old: 24,
    country: Country.USA,
    results_wanted: 10,
  };

  console.log("üïê Testing recent jobs search (24h)...");

  const result = await scraper.scrape(input);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");

  console.log(`Found ${result.jobs.length} jobs posted in last 24 hours`);

  if (result.jobs.length > 0) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const now = new Date();
    // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤ 12 —á–∞—Å–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    const bufferHours = 12;
    const bufferTime = new Date(
      now.getTime() - (24 + bufferHours) * 60 * 60 * 1000,
    );

    for (const job of result.jobs) {
      if (job.date_posted) {
        assert(job.date_posted instanceof Date, "date_posted –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Date");
        assert(
          job.date_posted >= bufferTime,
          "–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
        );
        console.log(`üìÖ ${job.title}: ${job.date_posted.toISOString()}`);
      }
    }
  }
});

/**
 * –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å easy apply
 */
Deno.test("Indeed Integration - Easy apply jobs", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "marketing specialist",
    easy_apply: true,
    country: Country.USA,
    results_wanted: 4,
  };

  console.log("‚ú® Testing easy apply jobs...");

  const result = await scraper.scrape(input);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");

  console.log(`Found ${result.jobs.length} easy apply jobs`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ —Å easy_apply —Ñ–∏–ª—å—Ç—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç
  if (result.jobs.length > 0) {
    for (const job of result.jobs) {
      console.log(
        `üìÑ ${job.title} - Company: ${job.company_name || "Unknown"}`,
      );
    }
  }
});

/**
 * –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
Deno.test("Indeed Integration - Large result set with pagination", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "developer",
    country: Country.USA,
    results_wanted: 25,
    description_format: DescriptionFormat.HTML,
  };

  console.log("üìÑ Testing pagination with 25 results...");

  const startTime = Date.now();
  const result = await scraper.scrape(input);
  const duration = Date.now() - startTime;

  console.log(`‚è±Ô∏è Large search completed in ${duration}ms`);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
  assert(
    result.jobs.length <= 25,
    "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
  );

  console.log(`üìä Retrieved ${result.jobs.length} jobs out of requested 25`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å URL –≤–∞–∫–∞–Ω—Å–∏–π
  const urls = result.jobs.map((job) => job.job_url);
  const uniqueUrls = new Set(urls);
  assertEquals(
    urls.length,
    uniqueUrls.size,
    "–í—Å–µ URL –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏",
  );
});

/**
 * –¢–µ—Å—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
Deno.test("Indeed Integration - Complex search with multiple filters", async () => {
  const scraper = new IndeedScraper();

  const input: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "senior python developer",
    location: "New York",
    country: Country.USA,
    distance: 50,
    is_remote: false,
    job_type: JobType.FULL_TIME,
    results_wanted: 10,
    hours_old: 168, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    description_format: DescriptionFormat.MARKDOWN,
  };

  console.log("üîç Testing complex search with multiple filters...");

  const result = await scraper.scrape(input);

  assert(Array.isArray(result.jobs), "Jobs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");

  console.log(`üéØ Complex search found ${result.jobs.length} jobs`);

  if (result.jobs.length > 0) {
    const job = result.jobs[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    assertExists(job.title);
    assertExists(job.job_url);
    // Note: Search results may be relevant even if they don't contain exact terms
    // Just check that we got developer-related jobs
    const titleLower = job.title.toLowerCase();
    const hasTechTerm = titleLower.includes("developer") ||
      titleLower.includes("engineer") ||
      titleLower.includes("scientist") ||
      titleLower.includes("analyst");
    assert(hasTechTerm, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω");

    console.log(`‚≠ê Sample job: ${job.title}`);
    console.log(`üè¢ Company: ${job.company_name || "Not specified"}`);
    console.log(`üìç Location: ${job.location?.city || "Remote"}`);
    console.log(`üí∞ Remote: ${job.is_remote}`);
  }
});

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
 */
Deno.test("Indeed Integration - Error handling", async () => {
  const scraper = new IndeedScraper();

  // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const invalidInput: ScraperInput = {
    site_type: [Site.INDEED],
    search_term: "", // –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    country: Country.USA,
    results_wanted: -1, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  };

  console.log("üö® Testing error handling...");

  try {
    const result = await scraper.scrape(invalidInput);
    // –î–∞–∂–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assertExists(result);
    console.log("API handled invalid parameters gracefully");
  } catch (error) {
    console.log(
      "API correctly rejected invalid parameters:",
      error instanceof Error ? error.message : String(error),
    );
  }
});

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
Deno.test("Indeed Integration - Performance test", async () => {
  const scraper = new IndeedScraper();
  const searchTerms = ["javascript", "react", "typescript", "node.js"];

  console.log("‚ö° Testing performance with multiple searches...");

  const results = [];

  for (const term of searchTerms) {
    const input: ScraperInput = {
      site_type: [Site.INDEED],
      search_term: term,
      country: Country.USA,
      results_wanted: 3,
    };

    const startTime = Date.now();
    const result = await scraper.scrape(input);
    const duration = Date.now() - startTime;

    results.push({
      term,
      count: result.jobs.length,
      duration,
    });

    console.log(`üîç "${term}": ${result.jobs.length} jobs in ${duration}ms`);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
    await new Promise((resolve) => setTimeout(resolve, 2000));
  }

  const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) /
    results.length;
  const totalJobs = results.reduce((sum, r) => sum + r.count, 0);

  console.log(`üìà Performance summary:`);
  console.log(`   - Average response time: ${Math.round(avgDuration)}ms`);
  console.log(`   - Total jobs found: ${totalJobs}`);
  console.log(`   - Searches completed: ${results.length}`);
});
